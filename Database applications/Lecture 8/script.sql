DROP TABLE Return CASCADE CONSTRAINTS;
/
DROP TABLE Issue CASCADE CONSTRAINTS;
/
DROP TABLE Request CASCADE CONSTRAINTS;
/
DROP TABLE Book CASCADE CONSTRAINTS;
/
DROP TABLE Employee CASCADE CONSTRAINTS;
/
DROP TABLE Client CASCADE CONSTRAINTS;
/


CREATE TABLE Client
(
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY,

    Name VARCHAR(64) NOT NULL,
    Address VARCHAR(64) NOT NULL,
    Phone VARCHAR(32) NOT NULL,
    Email VARCHAR(64) NOT NULL,

    CONSTRAINT Client_PK PRIMARY KEY (ID)
)
/

CREATE TABLE Employee
(
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY,

    Name VARCHAR(64) NOT NULL,
    Address VARCHAR(64) NOT NULL,
    Phone VARCHAR(32) NOT NULL,
    Email VARCHAR(64) NOT NULL,

    CONSTRAINT Employee_PK PRIMARY KEY (ID)
)
/

CREATE TABLE Book
(
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY,

    Name VARCHAR(64) NOT NULL,
    Category VARCHAR(32) NOT NULL,
    Author VARCHAR(64) NOT NULL,
    Year NUMBER NOT NULL,
    Price NUMBER NOT NULL,
    Status VARCHAR(64) NOT NULL,

    CONSTRAINT Book_PK PRIMARY KEY (ID)
)
/

CREATE TABLE Request
(
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY,

    Status VARCHAR(64) NOT NULL,

    Client_ID NUMBER NOT NULL,
    Book_ID NUMBER NOT NULL,

    CONSTRAINT Request_PK PRIMARY KEY (ID),

    CONSTRAINT Request_client_FK FOREIGN KEY (Client_ID) REFERENCES Client(ID),
    CONSTRAINT Request_book_FK FOREIGN KEY (Book_ID) REFERENCES Book(ID)
)
/

CREATE TABLE Issue
(
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY,

    Request_ID NUMBER NOT NULL,
    Employee_ID NUMBER NOT NULL,

    Issue_date DATE NOT NULL,
    Return_date DATE NOT NULL,

    CONSTRAINT Issue_PK PRIMARY KEY (ID),

    CONSTRAINT Issue_request_FK FOREIGN KEY (Request_ID) REFERENCES Request(ID),
    CONSTRAINT Issue_employee_FK FOREIGN KEY (Employee_ID) REFERENCES Employee(ID)
)
/

CREATE TABLE Return
(
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY,

    Issue_ID NUMBER NOT NULL,
    Employee_ID NUMBER NOT NULL,

    True_return_date DATE NOT NULL,

    CONSTRAINT Return_PK PRIMARY KEY(ID),

    CONSTRAINT Return_issue_FK FOREIGN KEY (Issue_ID) REFERENCES Issue(ID),
    CONSTRAINT Return_employee_FK FOREIGN KEY (Employee_ID) REFERENCES Employee(ID)
)
/

INSERT INTO Client(Name, Address, Phone, Email)
VALUES ('Павел Кижнеров', 'Москва, Тверская 6с1', '+79213636398', 'p.a.kizhnerov@gmail.com')
/

INSERT INTO Employee(Name, Address, Phone, Email)
VALUES ('Ермак Владлена', 'Москва, Тверская 6с1', '+79522012434', 'vlada.ermak@gmail.com')
/

INSERT INTO Book(Name, Category, Author, Year, Price, Status)
VALUES ('Как убить мужа', 'Криминал', 'Ермак Владлена', 2023, 999, 'Свободна')
/

INSERT INTO Book(Name, Category, Author, Year, Price, Status)
VALUES ('Как заработать все деньги', 'Криминал', 'Ермак Владлена', 2019, 1999, 'Свободна')
/

INSERT INTO Book(Name, Category, Author, Year, Price, Status)
VALUES ('Как ничего не делать', 'Криминал', 'Ермак Владлена', 2022, 1999, 'Свободна')
/

INSERT INTO Book(Name, Category, Author, Year, Price, Status)
VALUES ('Породы собак', 'Энциклопедии', 'Ермак Владлена', 2022, 1999, 'Свободна')
/

CREATE
OR REPLACE TRIGGER Issue_update_status AFTER INSERT ON Issue FOR EACH ROW
BEGIN
    UPDATE
    Book
    SET
    Status = 'Withdrawed'
    WHERE
    ID = (SELECT Book_ID FROM Request WHERE ID = :NEW.Request_ID);
END;
/

CREATE
OR REPLACE TRIGGER Return_update_status AFTER INSERT ON Return FOR EACH ROW
BEGIN
    UPDATE
    Book
    SET
    Status = 'Ready'
    WHERE
    ID = (SELECT Book_ID FROM Request WHERE ID = (SELECT Request_ID FROM Issue WHERE ID = :NEW.Issue_ID));
END;
/